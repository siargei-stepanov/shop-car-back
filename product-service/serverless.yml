# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        Fn::GetAtt:
          - catalogItemsQueue
          - Arn
    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: createProductTopic

# you can define service wide environment variables here
  environment:
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic
    PG_HOST: task4-db.cqa5v273sikm.eu-west-1.rds.amazonaws.com
    PG_PORT: 5432
    PG_DB: task4
    PG_USER: postgres
    PG_PWD: 123


# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  getProductById:
    handler: handler.getProductById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          path: /products
          method: post
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello



# you can add CloudFormation resource templates here
resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    createProductEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: siargei.stepanov@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
